
loadrt hostmot2
loadrt hm2_pci config="num_encoders=1 num_pwmgens=0 num_3pwmgens=0 num_stepgens=2 sserial_port_0=00xxx" 
setp     hm2_5i25.0.watchdog.timeout_ns 10000000

addf hm2_5i25.0.read servo-thread
#addf motion-command-handler servo-thread
#addf motion-controller servo-thread
addf hm2_5i25.0.write         servo-thread
addf hm2_5i25.0.pet_watchdog  servo-thread

# TODO diesen Watchdog testen...




#######################
# Grundlagen: Bahnplanung GCode etc.

# connect position commands from motion module to step generator
net Xpos-cmd axis.0.motor-pos-cmd => hm2_5i25.0.stepgen.00.position-cmd
net Zpos-cmd axis.2.motor-pos-cmd => hm2_5i25.0.stepgen.01.position-cmd

# connect position feedback from step generators
# to motion module
net Xpos-fb hm2_5i25.0.stepgen.00.position-fb => axis.0.motor-pos-fb
net Zpos-fb hm2_5i25.0.stepgen.01.position-fb => axis.2.motor-pos-fb

net Xen => hm2_5i25.0.stepgen.00.enable
net Zen => hm2_5i25.0.stepgen.01.enable

####################

# set stepgen module scaling - get values from ini file
# zur Angleichung an die simulation auf INPUT_SCALE umbenannt
setp hm2_5i25.0.stepgen.00.position-scale [AXIS_0]INPUT_SCALE
setp hm2_5i25.0.stepgen.01.position-scale [AXIS_2]INPUT_SCALE

# set stepgen module accel limits - get values from ini file
setp hm2_5i25.0.stepgen.00.maxaccel [AXIS_0]STEPGEN_MAXACCEL
setp hm2_5i25.0.stepgen.01.maxaccel [AXIS_2]STEPGEN_MAXACCEL

# ergänzt zur Auslagerung in ini-File:
# Timings
setp hm2_5i25.0.stepgen.00.steplen [STEPPER_TIMING]STEPGEN_STEP_LEN
setp hm2_5i25.0.stepgen.00.stepspace [STEPPER_TIMING]STEPGEN_STEP_SPACE
setp hm2_5i25.0.stepgen.00.dirhold [STEPPER_TIMING]STEPGEN_DIR_HOLD
setp hm2_5i25.0.stepgen.00.dirsetup [STEPPER_TIMING]STEPGEN_DIR_SETUP
setp hm2_5i25.0.stepgen.01.steplen [STEPPER_TIMING]STEPGEN_STEP_LEN
setp hm2_5i25.0.stepgen.01.stepspace [STEPPER_TIMING]STEPGEN_STEP_SPACE
setp hm2_5i25.0.stepgen.01.dirhold [STEPPER_TIMING]STEPGEN_DIR_HOLD
setp hm2_5i25.0.stepgen.01.dirsetup [STEPPER_TIMING]STEPGEN_DIR_SETUP



# TB2
# Step/Dir 0 ist Achse X
# Step/Dir 1 ist Achse Z


######################
# Spindel
######################
net spindle-on <= motion.spindle-on
net spindle-on => hm2_5i25.0.7i76.0.0.spinena
net spindle-reverse motion.spindle-reverse <= hm2_5i25.0.7i76.0.0.spindir
# Spindel PWM in 0 ... 1  (1=100%)
# da maxlim und minlim scheinbar kaputt ist, machen wir das vorher selber
setp hm2_5i25.0.7i76.0.0.spinout-scalemax 1
setp hm2_5i25.0.7i76.0.0.spinout-maxlim 1
setp hm2_5i25.0.7i76.0.0.spinout-minlim 0

loadrt scale names=scale_spindle
addf scale_spindle servo-thread
net spindle-speed-cmd-abs <= motion.spindle-speed-out-abs
# 5000 rpm = 100%
# 0 rpm = 20% (etwa)
setp scale_spindle.offset 0.2
setp scale_spindle.gain 0.00016
net spindle-speed-cmd-abs => scale_spindle.in
net spindle-pwm-out-unlimited scale_spindle.out 

loadrt limit1 names=limit1_spindle
addf limit1_spindle servo-thread
net spindle-pwm-out-unlimited => limit1_spindle.in
setp limit1_spindle.min 0
# Begrenzung auf 4800 (Futter Maximaldrehzahl) = 0.2 + 0.8*4800/5000
setp limit1_spindle.max 0.968


# Spindelsignal auf 0% schalten (statt 20% Ruhepegel), wenn ausgeschaltet
loadrt mult2 names=mult2_spindle
addf mult2_spindle servo-thread
net spindle-pwm-always-on limit1_spindle.out => mult2_spindle.in0
net spindle-on-float => mult2_spindle.in1
net spindle-pwm-out mult2_spindle.out => hm2_5i25.0.7i76.0.0.spinout

# bit nach float wandeln
loadrt conv_bit_s32 names=conv_bit_s32-spindle-on
loadrt conv_s32_float names=conv_s32_float-spindle-on
net spindle-on => conv_bit_s32-spindle-on.in
net spindle-on-s32 conv_bit_s32-spindle-on.out => conv_s32_float-spindle-on.in
addf conv_s32_float-spindle-on servo-thread
addf conv_bit_s32-spindle-on servo-thread
net spindle-on-float <= conv_s32_float-spindle-on.out




######################
# Inputs TB5
######################
# In16 Drive 1 Alarm (Fehlermeldung des Steppertreibers)
# weiter unten für estop verwendet
net drive1-alarm <= hm2_5i25.0.7i76.0.0.input-16

# In17 Drive 2 Alarm (Fehlermeldung des Steppertreibers)
# weiter unten für estop verwendet
net drive2-alarm <= hm2_5i25.0.7i76.0.0.input-17

# In18 Notaus
# weiter unten für estop verwendet
net estop-in <= hm2_5i25.0.7i76.0.0.input-18-not

# In19 Futterhaube
net futterhaube-offen <= hm2_5i25.0.7i76.0.0.input-19-not

# In20 Endschalter Z
net Zhomesw <= hm2_5i25.0.7i76.0.0.input-20
net Zhomesw => axis.2.neg-lim-sw-in

# In21 Endschalter X
net Xhomesw <= hm2_5i25.0.7i76.0.0.input-21
net Xhomesw => axis.0.neg-lim-sw-in

# In22 loopback von Out9 (für Watchdog)
net watchdog-loopback-in <= hm2_5i25.0.7i76.0.0.input-22

# In23-... leer

#############
# Outputs TB5: die Bezeichnung gilt immer für Signal an, also 24V
##############
# Out8 Drive1+2 Enable
# TODO liefert Xen und Zen das gleiche Signal?
# -> or-Gatter o.ä. verbauen
net Xen => hm2_5i25.0.7i76.0.0.output-08
setp hm2_5i25.0.7i76.0.0.output-08-invert true

# Out9 loopback an In22 (für Watchdog)
net watchdog-loopback-out => hm2_5i25.0.7i76.0.0.output-09

# Out10 Kühlschmierung an
# TODO ist im Schaltschrank als Toggle-Puls, wir wollen aber an/aus
# deshalb auskommentiert
# net coolant-flood => hm2_5i25.0.7i76.0.0.output-10

# Out11 Schutzhaube freigeben (wenn aus, löst die Schutzhaube den Notaus aus)
net haube-sperren => hm2_5i25.0.7i76.0.0.output-11
setp hm2_5i25.0.7i76.0.0.output-11-invert TRUE

# Out12 Ampel blau
net tool-change => hm2_5i25.0.7i76.0.0.output-12

# Out13 Ampel rot
net estop-out => hm2_5i25.0.7i76.0.0.output-13
setp hm2_5i25.0.7i76.0.0.output-13-invert TRUE

# Out14 Ampel grün
net program-is-running halui.program.is-running => hm2_5i25.0.7i76.0.0.output-14

# Out15 Ampel gelb
net program-is-paused halui.program.is-paused => hm2_5i25.0.7i76.0.0.output-15

# Input TB5
# In0-15 leer

# Outputs TB5
# Out0 Ampel weiß
# TODO (wunsch) auch die Polycarbonat-Haube mit anzeigen. Dafür haben wir noch keinen Input.
net futterhaube-offen => hm2_5i25.0.7i76.0.0.output-00 





#######################################################
# Notaus-Überwachung, auch Fehler-Eingänge Drives + Watchdog
#######################################################
loadrt match8 names=match8_errors
addf match8_errors servo-thread
net watchdog-ok => match8_errors.a0
setp match8_errors.b0 TRUE
net drive1-alarm => match8_errors.a1
setp match8_errors.b1 FALSE
net drive2-alarm => match8_errors.a2
setp match8_errors.b2 FALSE
net estop-in => match8_errors.a3
setp match8_errors.b3 FALSE
net futterhaube-fehler => match8_errors.a4
setp match8_errors.b4 FALSE
net encoder-decode-error => match8_errors.a5
setp match8_errors.b5 FALSE

# .a6 bis .a8 wäre noch frei für weitere Dinge...
net estop-out <= match8_errors.out


#######################################################
# Futterhaube sperren gegen spindle-enable
# (-> estop)
#######################################################
loadrt and2 names=and2_futterhaube_fehler
addf and2_futterhaube_fehler servo-thread
net futterhaube-offen => and2_futterhaube_fehler.in0
net spindle-on => and2_futterhaube_fehler.in1
net futterhaube-fehler <= and2_futterhaube_fehler.out

#######################################################
# Watchdog der die IO-Karte überwacht
#######################################################
loadrt not names=not_watchdog
addf not_watchdog servo-thread
net watchdog-loopback-in => not_watchdog.in
net watchdog-loopback-out <= not_watchdog.out

loadrt watchdog num_inputs=1
addf watchdog.process servo-thread
addf watchdog.set-timeouts servo-thread
net watchdog-loopback-in => watchdog.input-0
setp watchdog.enable-in TRUE
setp watchdog.timeout-0 0.01
net watchdog-ok <= watchdog.ok-out



#######################################################
# Logik Haubenfreigabe
# Haube sperren, wenn: spindle-on || (program-is-running && !tool-change)
#######################################################
loadrt not names=not_toolchange
addf not_toolchange servo-thread
net tool-change => not_toolchange.in
net tool-change-invert <= not_toolchange.out

loadrt and2 names=and2_programm_bewegt_sich
addf and2_programm_bewegt_sich servo-thread
net program-is-running => and2_programm_bewegt_sich.in0
net tool-change-invert => and2_programm_bewegt_sich.in1

loadrt or2 names=or2_haube_sperren
addf or2_haube_sperren servo-thread

net spindle-on => or2_haube_sperren.in1
net haube-sperren <= or2_haube_sperren.out


#######################################################
# Spindle Encoder feedback
#######################################################

# spindle speed control
net spindle-speed-cmd  motion.spindle-speed-out

# 4000 steps/U
setp hm2_5i25.0.encoder.00.scale 4000
# TODO keine ahnung ob das geht... aber wie will man es testen?
net encoder-decode-error <= hm2_5i25.0.encoder.00.quad-error
setp hm2_5i25.0.encoder.00.quad-error-enable TRUE

# TODO funktioniert gewindedrehen?
# encoder reset control
# hook up motion controller's sync output
net spindle-index-enable motion.spindle-index-enable <=> hm2_5i25.0.encoder.00.index-enable

# report our revolution count to the motion controller
net spindle-pos hm2_5i25.0.encoder.00.position => motion.spindle-revs

# for spindle velocity estimate
loadrt lowpass names=lowpass_velocity
loadrt scale names=scale_to_rpm
net spindle-rps-raw hm2_5i25.0.encoder.00.velocity => lowpass_velocity.in
net spindle-rps-filtered lowpass_velocity.out => scale_to_rpm.in motion.spindle-speed-in
net spindle-rpm-filtered scale_to_rpm.out
setp scale_to_rpm.gain 60
setp lowpass_velocity.gain .07
addf lowpass_velocity servo-thread
addf scale_to_rpm servo-thread

# for at-speed detection
loadrt near names=near_speed
addf near_speed servo-thread
setp near_speed.scale 1.1
setp near_speed.difference 10
net spindle-speed-cmd => near_speed.in1
net spindle-rpm-filtered => near_speed.in2
net spindle-at-speed near_speed.out motion.spindle-at-speed

net  spindle-fwd <= motion.spindle-forward